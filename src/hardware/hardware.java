/*
 * NewJFrame.java
 *
 * Created on 6 de noviembre de 2009, 10:06
 */

package hardware;

import javax.swing.DefaultListModel;

/**
 *
 * @author  red
 */
public class hardware extends javax.swing.JFrame {
    private DefaultListModel entrada;
    private DefaultListModel salida;
    private DefaultListModel espera;
    public static final int NUM_OF_READERS = 3;
    public static final int NUM_OF_WRITERS = 2;
    
    /** Creates new form NewJFrame */
    public hardware() {
        initComponents();
        entrada = new DefaultListModel();
            jList1.setModel(entrada);
            salida = new DefaultListModel();
            jList2.setModel(salida);
            espera=new DefaultListModel();
            jList3.setModel(espera);
            
        HardwareData lock = new HardwareData(false);

		for (int i = 0; i < 5; i++)
			new Thread(new Worker("worker " + new Integer(i).toString(),  lock )).start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Metodo de sincronizacion de hardware");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jList3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList3);

        jLabel1.setText(" COLA");

        jLabel2.setText("DENTRO");

        jLabel3.setText("AFUERA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel2)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hardware().setVisible(true);
            }
        });
    }
    
    public class HardwareData
{
	private boolean value;
	
	public HardwareData(boolean data) {
		this.value = data;
	}

	public boolean get() {
		return value;
	}

	public void set(boolean data) {
		this.value = data;
	}

	public boolean getAndSet(boolean data) {
		boolean oldValue = this.value;
		this.value = data;

		return oldValue;
	}

	/**
	 * swap other with this.
	 */
	public void swap(HardwareData other) {
		boolean temp = this.get();

		this.set(other.get());
		other.set(temp);
	}
}
    
    public class Worker implements Runnable
{
	   private String name; 		// the name of this thread
	   private HardwareData mutex;		// shared mutex

   public Worker(String name, HardwareData mutex) {
      this.name = name;
      this.mutex = mutex;
   }

   /**
    * This run() method tests the getAndSet() instruction
    */
   public void run() {
      while (true) {
	 System.out.println(name + " wants to enter CS");
         espera.addElement(name + " esperando entrar");
	 while (mutex.getAndSet(true))
		Thread.yield(); // wait

         MutualExclusionUtilities.criticalSection(name);
         entrada.addElement(name + " en zona critica");
         mutex.set(false);
         MutualExclusionUtilities.remainderSection(name);
         salida.addElement(name + " afuera de zona critica");
      }
   }

   /**
    * This run() method tests the swap() instruction
	public void run() {
		key = new HardwareData(true);

                while (true) {
	 		System.out.println(name + " wants to enter CS");
                        key.set(true);

			do {
				mutex.swap(key);
			}
			while(key.get() == true);

                        MutualExclusionUtilities.criticalSection(name);

                        mutex.set(false);

                        MutualExclusionUtilities.nonCriticalSection(name);
                }
	}
    */


}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
    
}
