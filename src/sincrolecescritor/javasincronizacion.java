/*
 * NewJFrame.java
 *
 * Created on 6 de noviembre de 2009, 11:00
 */

package sincrolecescritor;

import javax.swing.DefaultListModel;

/**
 *
 * @author  red
 */
public class javasincronizacion extends javax.swing.JFrame {
    private DefaultListModel escribiendo;
    private DefaultListModel escrito;
    private DefaultListModel leyendo;
    private DefaultListModel leido;
    private DefaultListModel kescribir;
    private DefaultListModel kleer;
    
     public static final int NUM_OF_READERS = 3;
    public static final int NUM_OF_WRITERS = 2;
    /** Creates new form NewJFrame */
    public javasincronizacion() {
        initComponents();
        
         escribiendo = new DefaultListModel();
            jList1.setModel(escribiendo);
            leyendo = new DefaultListModel();
            jList2.setModel(leyendo);
            kescribir=new DefaultListModel();
            jList3.setModel(kescribir);
            kleer=new DefaultListModel();
            jList4.setModel(kleer);
            escrito = new DefaultListModel();
            jList5.setModel(escrito);
            leido=new DefaultListModel();
            jList6.setModel(leido);
            
            
            
            RWLock server = new Database();

      Thread[] readerArray = new Thread[NUM_OF_READERS];
      Thread[] writerArray = new Thread[NUM_OF_WRITERS];

      for (int i = 0; i < NUM_OF_READERS; i++) {
         readerArray[i] = new Thread(new Reader(i, server));
         readerArray[i].start();
      }

      for (int i = 0; i < NUM_OF_WRITERS; i++) {
         writerArray[i] = new Thread(new Writer(i, server));
         writerArray[i].start();
      }
        
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        jList6 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Metodo de sincronizacion de java");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jList3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList3);

        jList4.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList4);

        jList5.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jList5);

        jList6.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(jList6);

        jLabel1.setText("deseaescribir");

        jLabel2.setText("desealeer");

        jLabel3.setText("ha escrito");

        jLabel4.setText(" ha leido");

        jLabel5.setText("esta escribiendo");

        jLabel6.setText("esta leyendo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabel6))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(171, 171, 171))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new javasincronizacion().setVisible(true);
            }
        });
    }
    public class Writer implements Runnable
{
   private RWLock server;
   private int       writerNum;

   public Writer(int w, RWLock db) {
      writerNum = w;
      server = db;
   }

   public void run() {
     while (true)
      {
	SleepUtilities.nap();

       System.out.println("writer " + writerNum + " wants to write.");
        kescribir.addElement(writerNum + " quiere escribir");
       server.acquireWriteLock(writerNum);

       // you have access to write to the database
       // write for awhile ...
	SleepUtilities.nap();

       server.releaseWriteLock(writerNum);
      }
   }


}
public class Reader implements Runnable
{

   private RWLock db;
   private int       readerNum;

   public Reader(int readerNum, RWLock db) {
      this.readerNum = readerNum;
      this.db = db;
   }

   public void run() {
     while (true) {
       SleepUtilities.nap();

       System.out.println("reader " + readerNum + " wants to read.");
       kleer.addElement(readerNum + " quiere leer");
       
       db.acquireReadLock(readerNum);

       // you have access to read from the database
       // let's read for awhile .....
       SleepUtilities.nap();

       db.releaseReadLock(readerNum);
      }
   }
;
}
public class Database implements RWLock
{
   // the number of active readers
   private int readerCount;

   // flag to indicate whether the database is in use
   private boolean dbWriting;

   public Database()
   {
      readerCount = 0;
      dbWriting = false;
   }

   // reader will call this when they start reading
   public synchronized void acquireReadLock(int readerNum)
   {
      while (dbWriting == true)
      {
         try { wait(); }
         catch(InterruptedException e) { }
      }

      ++readerCount;

      System.out.println("Reader " + readerNum + " is reading. Reader count = " + readerCount);
      leyendo.addElement("Lector " + readerNum + "esta leyendo");
   }

   // reader will call this when they finish reading
   public synchronized void releaseReadLock(int readerNum)
   {
      --readerCount;

      // if I am the last reader tell all others
      // that the database is no longer being read
      if (readerCount == 0)
	 notify();

      System.out.println("Reader " + readerNum + " is done reading. Reader count = " + readerCount);
      leido.addElement("Lector" + readerNum + "ha leido");
   }

   // writer will call this when they start writing
    public synchronized void acquireWriteLock(int writerNum) {
      while (readerCount > 0 || dbWriting == true) {
         try { wait(); }
         catch(InterruptedException e) {}
      }

      // once there are either no readers or writers
      // indicate that the database is being written
      dbWriting = true;

      System.out.println("writer " + writerNum + " is writing.");
      escribiendo.addElement("escritor"+ writerNum + "esta escribiendo");
   }

   // writer will call this when they start writing
   public synchronized void releaseWriteLock(int writerNum)
   {
      dbWriting = false;

      System.out.println("writer " + writerNum + " is done writing.");
      escrito.addElement("escritor" + writerNum + " ha escrito");

	/**
	 * This must be notifyAll()  as there may be more than
	 * one waiting reader to read the database and we must
	 * notify ALL of them.
	 */
      notifyAll();
   }
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JList jList4;
    private javax.swing.JList jList5;
    private javax.swing.JList jList6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables
    
}
